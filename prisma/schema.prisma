generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

generator json {
  provider = "prisma-json-types-generator"
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [uuid_ossp(map: "uuid-ossp", schema: "extensions"), vector]
}

model Taxa {
  id             Int      @id
  scientificName String?
  /// [CommonNames]
  commonNames    Json     @default("{}") // { "en": "Common name", "fr": "Nom commun" }
  rank           String
  rankLevel      Int
  parentId       Int?
  // embedding        Unsupported("vector")?
  // embeddingContent String?
  createdAt      DateTime @default(now()) @db.Timestamptz(6)
  updatedAt      DateTime @default(now()) @db.Timestamptz(6)
  parent         Taxa?    @relation("TaxaToTaxa", fields: [parentId], references: [id])
  children       Taxa[]   @relation("TaxaToTaxa")
  sources        Source[]
  medias         Media[]

  @@map("taxa")
}

model Source {
  id        String // id from the source
  name      String // "inaturalist", "fishbase"...
  context   String // "taxaApi"
  taxaId    Int
  /// [Any]
  json      Json
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @db.Timestamptz(6)

  taxa Taxa @relation(fields: [taxaId], references: [id])

  @@id([id, name, context, taxaId])
  @@map("source")
}

model Media {
  id          Int      @id @default(autoincrement())
  taxaId      Int
  type        String // "image", "video"...
  url         String
  originalUrl String?
  attribution String?
  position    Int?
  createdAt   DateTime @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime @default(now()) @db.Timestamptz(6)

  taxa Taxa @relation(fields: [taxaId], references: [id])

  @@unique([taxaId, url])
  @@map("media")
}
